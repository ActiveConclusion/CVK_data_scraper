import pandas as pd


def aggregate_by_party_region_council(candidates_data):
    """Aggregate candidates info data by party, region and council.
    For councils that don't provide data on nominated candidates, the number of nominees will be NA.

    Args:
        candidates_data (DataFrame): merged data of nominated and elected candidates
        (generated by merge_candidates_info function)

    Returns:
        DataFrame: aggregated data
    """
    # aggregate data
    aggregated_data = (
        candidates_data.groupby(["Партія", "Регіон", "Рада"], as_index=False)
        .agg(
            {
                "Статус": lambda x: (x == "обрано").sum(),
                "Прізвище, ім’я, по батькові": "count",
            }
        )
        .rename(
            columns={
                "Статус": "Кількість обраних",
                "Прізвище, ім’я, по батькові": "Кількість висунутих",
            }
        )
    )
    # assign NA where unknown number of nominated candidates
    # select councils in which the number of nominated is equal to the number of elected
    councils_nominated_equal_elected = (
        aggregated_data.groupby(["Регіон", "Рада"], as_index=False)
        .agg({"Кількість обраних": sum, "Кількість висунутих": sum})
        .query("`Кількість обраних` == `Кількість висунутих`")
    )
    # assign number of nominated to NA for these councils
    # TO DO: rewrite in a more civilised way
    for i in range(len(councils_nominated_equal_elected)):
        aggregated_data.loc[
            (aggregated_data["Регіон"] == councils_nominated_equal_elected.iloc[i, 0])
            & (aggregated_data["Рада"] == councils_nominated_equal_elected.iloc[i, 1]),
            "Кількість висунутих",
        ] = pd.NA
    return aggregated_data
